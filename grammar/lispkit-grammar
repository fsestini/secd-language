Prog -> let Bind in Exp end
Prog -> letrec Bind in Exp end
Bind -> var = Exp X
X -> and Bind
X -> eps
Exp -> Prog
Exp -> lambda ( SeqVar ) Exp
Exp -> ExpA
Exp -> OpP ( SeqExp )
Exp -> if Exp then Exp else Exp
ExpA -> T E1
E1 -> plus T E1
E1 -> minus T E1
E1 -> eps
T -> F T1
T1 -> star F T1
T1 -> slash F T1
T1 -> eps
F -> var Y
F -> const
F -> ( ExpA )
Y -> ( SeqExp )
Y -> eps
OpP -> cons
OpP -> car
OpP -> cdr
OpP -> eq
OpP -> leq
OpP -> atom
SeqExp -> Exp SeqExp2
SeqExp -> eps
SeqExp2 -> comma Exp SeqExp2
SeqExp2 -> eps
SeqVar -> var SeqVar
SeqVar -> eps
